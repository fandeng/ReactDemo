import React, {
    Component
} from 'react';
import {
    StyleSheet,
    Text,
    Image,
    ListView,
    WebView,
    TouchableOpacity,
    View,
    InteractionManager,
    Dimensions,
BackAndroid,
} from 'react-native';



import Common from '../common/common';
import HeaderView from '../common/HeaderView';
import RecipeSection from '../Data/RecipeSection.json';
import REQUEST_JSON from '../Data/Request.json';
import RecipeDetail from '../pages/RecipeDetail.js';
var DataRepository = require('../Data/DataRepository');
var SQLite = require('react-native-sqlite-storage')
var repository = new DataRepository();
var pageNum=1;


import ApplyVC from '../pages/ApplyMineInformation';


const HTML = `<!DOCTYPE html><html><head lang='en'><meta charset='utf-8'><meta name='viewport' content='width=device-width, initial-scale=1'><meta http-equiv='X-UA-Compatible' content='IE=edge'> <style type='text/css'>* { margin: 0;padding: 0;box-sizing: border-box;}body{font:12px 'microsoft yahei',arial,Helvetica,sans-serif; margin:0;color:#666;background: #fff;}a{text-decoration:none;color:#666;}a:hover{text-decoration:underline;color:#ff0700;}a:link,a:visited{ text-decoration:none; } ul,li,p,h1,h2,h3,h4,h5,h6,dl,dt,dd{margin:0;padding:0; list-style:none;}.lf{float:left;}.rt{float:right;}.main_intro,.main_other{overflow: hidden;}.main_intro{width:70%; padding-right:0.5rem;}.main_other{width:30%;/*margin-left:0.5rem;*/ }.main_other li{float:left;}.main_intro li{float:right;}.doctor_card{width:100%;height:20rem;padding:1.5rem 0;position: relative; background: #fff;}.name_title{ width:1.2rem; font-size:0.8rem;margin-left:0.8rem;margin-top:2rem;font-weight: 600;} .name{ font-size:2rem; width:2.4rem;color: #333;font-weight: 600;text-align: center; margin-left:0.3rem; }.doctor_intro{width:1.2rem;height: 18rem;font-size:0.8rem;-webkit-writing-mode: vertical-rl;writing-mode: vertical-rl; }.doctor_introTitle,.work_title,.phone_title{ width:2rem; font-size:1.1rem; text-align: center;font-weight: 600; }.doctor_introTitle,.phone_title{border-right:1px solid #681A28; /*padding-right:0.3rem;*/margin-left:0.3rem; }.phone{width:1.2rem; font-size:0.8rem; margin-left:0.6rem;writing-mode: vertical-rl;-webkit-writing-mode: vertical-rl;-o-writing-mode: vertical-rl;-moz-writing-mode: vertical-rl;-safari-writing-mode: vertical-rl; }.work{width:1.2rem; font-size:0.8rem; margin-left:0.6rem;} .doctor_card img{position: absolute;bottom: 1.5rem;right:2rem; border-radius: 50%;}</style></head><body><div class='doctor_card'><ul class='lf main_other'><li class='name_title'>中医医师</li><li class='name'>#name#</li></ul><ul class='rf main_intro'><li class='work_title'>工作单位</li><li class='work'>广州妇幼保健院</li><li class='phone_title'>手机号码</li><li class='phone'>15798543657</li><li class='doctor_introTitle'>个人介绍</li><li class='doctor_intro'>中医推拿、穴位按摩、针灸、按摩</li><li class='doctor_intro'>、刮痧、艾灸、中医理疗</li></ul><img src='./a.jpg'/></div></body></html>`;

class Class extends Component {
    constructor(props) {
        super(props);
        this._renderRow = this.renderRow.bind(this);
        this.state = {
            data:RecipeSection.section,
            dataSource: new ListView.DataSource({
                rowHasChanged: (row1, row2) => row1 !== row2,
            }),
        };
    }




    render() {
        const {Class} = this.props;
        return (
            <View>
                <HeaderView
                    titleView= '消息中心'
                    leftIcon={'angle-left'}
                    leftIconAction={() => this.props.navigator.pop()}/>
                {
                    // <WebView
                    //     style={{
                    //          backgroundColor:'#00ff00',
                    //            height:200,
                    //            width:300,
                    //            flex:1,
                    //       }}
                    //     source={{html: HTML,baseUrl:"file:///mnt/sdcard/"}}
                    //     scalesPageToFit={true}
                    // />
                    <ListView
                        dataSource={this.state.dataSource.cloneWithRows(this.state.data) }
                        renderRow={this._renderRow}
                        enableEmptySections={true}
                        onEndReached={this.loadmore.bind(this,pageNum)}
                        onEndReachedThreshold={10}
                        initialListSize= {10}
                        style={{ height: Common.window.height- 64 }}
                        />
                }
            </View>
        );

    }
    onPressApply() {
        InteractionManager.runAfterInteractions(() => {
            this.props.navigator.push({
                name: '流程',
                component: ApplyVC,
            })
        });
    }



    componentWillMount(){
        var errorCB = function(err){
            console.log("SQL Error: " + err);
        }
        var successCB = function(){
            console.log("SQL executed fine");
        }

        var openCB = function(){
            console.log("Database OPENED");
        }
        var db = SQLite.openDatabase("test.db", "1.0", "Test Database", 200000, openCB, errorCB);
        db.transaction((tx) => {
            tx.executeSql('SELECT * FROM Employees a, Departments b WHERE a.department = b.department_id', [], (tx, results) => {
                console.log("Query completed");

                // Get rows with Web SQL Database spec compliance.

                var len = results.rows.length;
                for (let i = 0; i < len; i++) {
                    let row = results.rows.item(i);
                    console.log(`Employee name: ${row.name}, Dept Name: ${row.deptName}`);
                }

                // Alternatively, you can use the non-standard raw method.

                /*
                 let rows = results.rows.raw(); // shallow copy of rows Array

                 rows.map(row => console.log(`Employee name: ${row.name}, Dept Name: ${row.deptName}`));
                 */
            });
        });
        
    }

componentWillUnmount(){
    console.log('component unmount');
    pageNum=0;

}



   loadmore(page) {
       console.log('onEndReached() page======>'+page);
        this.request(page);
       //  let classList = RecipeSection.section;
       // this.setState({
       //     data:this.state.data.concat(classList)
       // })
        // if (this.state.isLoadingTail) {
        //   return;
        // }
        // this.fetchStories(this.props.theme, false);
  }
componentDidMount(){
    console.log('component did mount');
        pageNum = 1;
        this.request(pageNum);
    BackAndroid.addEventListener('hardwareBackPress', () => {
    // this.props.navigator.pop()
     return false
});
}

    renderRow(rowDate,sectionID, rowID, highlightRow) {
        // console.log(sectionID+"--------"+rowID+"------dataSource---"+this.state.dataSource.getRowAndSectionCount());
        return (

            <TouchableOpacity
                activeOpacity={0.75}
                onPress={this._onPressFeedItem.bind(this, rowDate) }
                style={styles.center}
                >
                <View style = {styles.container}>
                   <Image style = {styles.image_left} source = {{uri: rowDate.url}}></Image>
                   <View style = {styles.right_view}>
                      <Text style = {styles.title}>{rowDate.name}</Text>
                   </View>
                </View>

            </TouchableOpacity>
        );
    }
    _onPressFeedItem(rowDate) {
        InteractionManager.runAfterInteractions(() => {
            this.props.navigator.push({
                name: rowDate.name,
                component: RecipeDetail,
                passProps: {
                    rowDate: rowDate,
                }
            })
        });
    }

    request(p) {
        var querydictionarydata = REQUEST_JSON.querydictionarydata;
        querydictionarydata.queryflag = 1;



        // console.log('request  page======>'+querydictionarydata.pagenum);
        repository.launchRequest('querydictionarydata',querydictionarydata).then((responseData) => {
            pageNum++;
            let classList = RecipeSection.section;
            this.setState({
                data:this.state.data.concat(classList)
            })
            console.log("======>"+pageNum);
        }).done();
    }



}

const styles = StyleSheet.create({
center:{
   flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
},
container: {
    width: Common.window.width-25,
    marginLeft: 15,
    marginRight: 10,
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: 'white',
    borderBottomColor: '#ccc',
    borderBottomWidth: 1,

},
image_left: {
  height: 60,
  width: 60,
  marginTop: 10,
  marginBottom: 10,
  marginLeft: 30,
},

title: {
  textAlign: 'left',
  marginLeft: 30,
  alignSelf: 'center',
  marginLeft: 30,
},


right_view: {
  flex: 1,
  flexDirection: 'row',
  justifyContent: 'space-between',
}

});
module.exports = Class;
